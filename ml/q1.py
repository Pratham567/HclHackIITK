# -*- coding: utf-8 -*-

"""IITK-Hackathon

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZVrhMK0mkzVTPbMJLhzLJqk5iao8mSDi
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import json, urllib.request

file = 'https://mettl-arq.s3-ap-southeast-1.amazonaws.com/questions/iit-kanpur/cyber-security-hackathon/round1/problem2/f1fswvsvi0/training.json'
with urllib.request.urlopen(file) as url:
    json_file = json.loads(url.read().decode('utf-8'))

df= pd.DataFrame(columns=['grade', 'score1', 'score2', 'score3', 'score4', 'score5', 'score6', 'score7', 'score8', 'score9', 'score10'])

for i in json_file:
  df = df.append(pd.DataFrame.from_dict(i).transpose())

df

# df['grade'][i](df.iloc[:,0])
# df.iloc[:,0]
target = np.array(df.iloc[:, 0])
for i in range(len(target)):
    if df['grade'][i] == 'Poor':
        df['grade'][i] = 0
    elif df['grade'][i] == 'Fair':
        df['grade'][i] = 1
    elif df['grade'][i] == 'Good':
        df['grade'][i] = 2
    elif df['grade'][i] == 'Very good':
        df['grade'][i] = 3
    elif df['grade'][i] == 'Exceptional':
        df['grade'][i] = 4
    else:
        None

# df.iloc[:,0]
# type(target)
target = np.array(df.iloc[:, 0])

target 
df

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(df, target, test_size= 0.5, random_state=5)

X_train, (y_train).shape

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(n_estimators=100)

y_train=y_train.astype('int')
rf = rf.fit(X_train, y_train)

from sklearn import metrics
y_pred = rf.predict(X_test)

(y_pred) , (y_test)

# print("Accuracy score =", metrics.accuracy_score(y_test, y_pred))

# from sklearn.tree import DecisionTreeClassifier
# from sklearn.ensemble import BaggingClassifier
# # Write your code here 
# # Set DecisionTreeClassifier class as a base estimator
# tree = DecisionTreeClassifier()
# bag = BaggingClassifier(tree, random_state=5)
# bag.fit(X_train, y_train) # Fit the model using train data
# print(bag.score(X_test,y_test)) # Get the accuracy of test data

count = 0
for i in range(len(y_pred)):
    if y_pred[i] == y_test[i]:
      count += 1
print(count/len(y_pred))

